sources:
  fluentbit:
    type: socket
    address: 0.0.0.0:24224
    mode: tcp

transforms:
  metrics_processing:
    type: remap
    inputs:
      - fluentbit
    source: |
      # Validation et conversion de .tag
      .tag = if .tag != null { to_string(.tag) ?? (log("Failed to convert .tag to string", level: "warn"); "") } else { "" }

      # Filtrer les m√©triques
      if starts_with(.tag, "metrics.") {
        .host = if .host != null { to_string(.host) ?? "unknown" } else { "unknown" }
        .service = "system"
        .metric_name = replace(.tag, "metrics.", "")

        # Validation de .message
        if .message == null {
          log("Missing .message in metrics event", level: "warn")
          .metric_value = 0.0
          .timestamp = now()
          .tags = {}
        } else {
          message_str = to_string(.message) ?? "{}"
          parsed, err = parse_json(message_str)

          .metric_value = if err == null && parsed.value != null {
            to_float(parsed.value) ?? 0.0
          } else {
            0.0
          }

          .timestamp = if err == null && parsed.timestamp != null {
            parse_timestamp(parsed.timestamp, "%Y-%m-%dT%H:%M:%S.%fZ") ?? now()
          } else {
            now()
          }

          .tags = if err == null { parsed.tags ?? {} } else { {} }
        }
      } else {
        null
      }

  logs_processing:
    type: remap
    inputs:
      - fluentbit
    source: |
      # Validation et conversion de .tag
      .tag = if .tag != null { to_string(.tag) ?? (log("Failed to convert .tag to string", level: "warn"); "") } else { "" }

      # Filtrer les logs
      if starts_with(.tag, "logs.") {
        .host = if .host != null { to_string(.host) ?? "unknown" } else { "unknown" }
        .service = "app"
        .tag = replace(.tag, "logs.", "")

        # Validation de .message
        if .message == null {
          log("Missing .message in logs event", level: "warn")
          .timestamp = now()
          .level = "unknown"
          .message = ""
          .tags = {}
        } else {
          raw_json = to_string(.message) ?? ""
          parsed, err = parse_json(raw_json)

          .timestamp = if err == null && parsed.timestamp != null {
            parse_timestamp(to_string(parsed.timestamp) ?? "", "%Y-%m-%dT%H:%M:%S.%fZ") ?? now()
          } else if .time != null {
            parse_timestamp(to_string(.time) ?? "", "%Y-%m-%d %H:%M:%S") ?? now()
          } else {
            now()
          }

          .level = if err == null && parsed.level != null {
            to_string(parsed.level) ?? "unknown"
          } else if .level != null {
            to_string(.level) ?? "unknown"
          } else {
            "unknown"
          }

          .message = if err == null && parsed.message != null {
            to_string(parsed.message) ?? ""
          } else {
            to_string(.message) ?? ""
          }

          .tags = if err == null { parsed.tags ?? {} } else { {} }
        }
      } else {
        null
      }

sinks:
  metrics_clickhouse:
    type: clickhouse
    inputs:
      - metrics_processing
    endpoint: http://89.116.38.238:8123
    database: default
    table: metrics_log
    compression: gzip
    skip_unknown_fields: true
    date_time_best_effort: true
    buffer:
      type: memory
      max_events: 1000
      when_full: block
    encoding:
      only_fields:
        - timestamp
        - host
        - service
        - metric_name
        - metric_value
        - tags

  logs_clickhouse:
    type: clickhouse
    inputs:
      - logs_processing
    endpoint: http://89.116.38.238:8123
    database: default
    table: logs_text
    compression: gzip
    skip_unknown_fields: true
    date_time_best_effort: true
    buffer:
      type: memory
      max_events: 1000
      when_full: block
    encoding:
      only_fields:
        - timestamp
        - host
        - service
        - level
        - message
        - tags